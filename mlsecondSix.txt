KFold

from sklearn.model_selection import KFold
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

X, y = load_iris(return_X_y=True)

kf = KFold(n_splits=5, shuffle=True, random_state=42)

model = LogisticRegression(max_iter=200)

fold = 1
for train_index, test_index in kf.split(X):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]

    
    model.fit(X_train, y_train)
    
    y_pred = model.predict(X_test)

    
    acc = accuracy_score(y_test, y_pred)
    print(f"Fold {fold}: Accuracy = {acc:.2f}")
    fold += 1

_______________________________________________________________
KMeans
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt

X, _ = make_blobs(n_samples=200, centers=3, cluster_std=0.6, random_state=0)


kmeans = KMeans(n_clusters=3, random_state=0)
kmeans.fit(X)


centers = kmeans.cluster_centers_
labels = kmeans.labels_


plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='rainbow')
plt.scatter(centers[:, 0], centers[:, 1], color='black', marker='X', s=200)
plt.show()

___________________________________________________________________________________

naviebayes

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

X, y = load_iris(return_X_y=True)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = GaussianNB()


model.fit(X_train, y_train)

y_pred = model.predict(X_test)


print("Accuracy:", accuracy_score(y_test, y_pred) * 100)


_____________________________________________________________________________

logisticregression


from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score


X, y = load_iris(return_X_y=True)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = LogisticRegression(max_iter=200)
    

model.fit(X_train, y_train)


y_pred = model.predict(X_test)


print("Accuracy:", accuracy_score(y_test, y_pred) * 100)


_____________________________________________________________________________________
SVM

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score


X, y = load_iris(return_X_y=True)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = SVC(kernel='linear')


model.fit(X_train, y_train)


y_pred = model.predict(X_test)


print("SVM Accuracy:", accuracy_score(y_test, y_pred) * 100 ,"%")

___________________________________________________________________________________________________
stackedGeneralisation

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.ensemble import StackingClassifier
from sklearn.metrics import accuracy_score

# Load dataset
X, y = load_iris(return_X_y=True)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


base_learners = [
    ('dt', DecisionTreeClassifier(random_state=42)),
    ('svm', SVC(probability=True, random_state=42))
]


meta_learner = LogisticRegression(max_iter=200)


stack_model = StackingClassifier(estimators=base_learners, final_estimator=meta_learner)


stack_model.fit(X_train, y_train)


y_pred = stack_model.predict(X_test)


print("Stacking Accuracy:", accuracy_score(y_test, y_pred) * 100)

